#!/usr/bin/env python3

"""
Calls the GitHub API to approve a pull request
"""
import logging
import sys
from json import dumps, load, loads
from os import listdir, path
from sys import argv, stderr, stdin

from jsonschema import validate  # type: ignore

from requests import get, put

assert len(argv) == 2

input_directory = argv[1]

assert path.exists(input_directory)
assert path.isdir(input_directory)

assert len(listdir(input_directory)) == 0, "This resource does not take any inputs."

concourse_input = loads(stdin.read())

with open(path.join(path.dirname(path.realpath(__file__)), "..", "schema", "input.json"), "r") as schema:
    validate(instance=concourse_input, schema=load(schema))

if "debug" in concourse_input["source"]:
    assert concourse_input["source"]["debug"] is True

    handler = logging.StreamHandler(stderr)
    handler.setLevel(logging.DEBUG)

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    logger.addHandler(handler)

    logger.debug("Debug logging enabled")

pull_request_url_parts = concourse_input["source"]["pull_request_url"].split("/")

host = pull_request_url_parts[2]
api_base_url = "https://" + ("api.github.com" if host == "github.com" else host + "/api/v3")
owner = pull_request_url_parts[3]
repo = pull_request_url_parts[4]
commit_id = concourse_input["source"]["commit"]
pull_number = pull_request_url_parts[6]

headers = {
    "Authorization": "Bearer " + concourse_input["source"]["token"],
    "User-Agent": "concourse-github-check-resource",
    "Accept": "application/vnd.github.v3+json",
}

data = {
    "commit_id": commit_id,
    "event": "APPROVE",
}

response = get(f"{api_base_url}/repos/{owner}/{repo}/pulls/{pull_number}", headers=headers)
assert (
    response.status_code == 200
), f"Got unexpected response code {response.status_code} from GitHub: {response.json()}"

json = response.json()

url = json["url"]
html_url = json["html_url"]

if response.json()["user"]["type"].lower() != "bot":
    print(
        dumps(
            {
                "version": {"status": "skipped"},
                "metadata": [{"name": "url", "value": url}, {"name": "html_url", "value": html_url},],  # noqa: E231
            }
        )
    )
    sys.exit(0)

if response.json()["mergeable"] is not True:
    print(
        dumps(
            {
                "version": {"status": "skipped"},
                "metadata": [{"name": "url", "value": url}, {"name": "html_url", "value": html_url},],  # noqa: E231
            }
        )
    )
    sys.exit(0)

response = put(f"{api_base_url}/repos/{owner}/{repo}/pulls/{pull_number}/merge", json=data, headers=headers)
assert (
    response.status_code == 200
), f"Got unexpected response code {response.status_code} from GitHub: {response.json()}"

print(
    dumps(
        {
            "version": {"status": "merged"},
            "metadata": [{"name": "url", "value": url}, {"name": "html_url", "value": html_url},],  # noqa: E231
        }
    )
)
